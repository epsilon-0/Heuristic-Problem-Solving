#include <iostream>
#include <cstdio>
#include <vector>
#include "edmondskarp.h"
#include <numeric>

using namespace std;

vector<vector<int> > assets(0);
int N,M,D,n[2],m[2],d[2];

vector<vector<int> > network;
vector<vector<double> > capacities;

int get_input(){
  scanf("%d %d %d\n",&N,&M,&D);
  scanf("%d-%d %d-%d %d-%d",n+0,n+1,m+0,m+1,d+0,d+1);
  int val;
  assets.resize(N);
  for(int i = 0; i < N; i++){
    for(int j = 0; j < M; j++){
      scanf("%d", &val);
      assets[i].push_back(val);
    }
  }
  return 42;
}


int make_network(){
  network.clear();network.resize(2+M+N);
  capacities.clear();capacities.resize(2+M+N,vector<double>(2+M+N,0));
  for(int i = 0; i < N+M; i++){
    network[0].push_back(i+1);
    capacities[0][i+1] = M*D;
  }
  for(int i = 0; i < N; i++){
    for(int j = 0; j < M; j++){
      if(assets[i][j]){
	network[i+1].push_back(j+1);
	capacities[i+1][j+1] = 1;
	network[j+1].push_back(i+1);
	capacities[j+1][i+1] = 1;
      }
    }
    network[i+1].push_back(N+M+1);
  }
  return 42;
}

int make_capacities(double g){
  for(int i = 1; i < N+M+1; i++){
    capacities[i][N+M+1] = M*D + 2*g - (network[i].size()-1);
  }
  return 42;
}

vector<int> get_subgraph(){
  double l=0, u=M*D, g;
  vector<int> subg, S;
  double breakpoint = 1.0/(0.0+(N+M)*(N+M-1));
  while(u-l>breakpoint){
    printf("%.10f  %0.10f\n", l, u);
    g=(u+l)/2;
    make_capacities(g);
    EdmondsKarp edk(network, capacities, 0, N+M+1);
    S = edk.getMinCut();
    if(S.size()==1){
      u=g;
    }
    else{
      l=g;
      subg = S;
    }
  }
  subg.erase(subg.begin());
  return subg;
}

int main(){
  get_input();
  make_network();
  vector<int> densest = get_subgraph();
  cout << densest.size() << endl;
}
