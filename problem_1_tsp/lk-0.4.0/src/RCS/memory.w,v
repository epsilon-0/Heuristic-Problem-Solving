head	1.116;
access
	david
	neto;
symbols
	zero-four-zero:1.116;
locks
	neto:1.116;


1.116
date	98.07.16.21.58.55;	author neto;	state Exp;
branches;
next	1.115;

1.115
date	98.02.13.21.16.30;	author neto;	state Exp;
branches;
next	1.114;

1.114
date	97.10.28.20.41.47;	author neto;	state Exp;
branches;
next	1.113;

1.113
date	97.09.27.18.06.21;	author neto;	state Exp;
branches;
next	1.112;

1.112
date	97.08.15.20.18.25;	author neto;	state Exp;
branches;
next	1.111;

1.111
date	97.06.16.16.05.26;	author neto;	state Exp;
branches;
next	1.110;

1.110
date	97.06.04.20.57.55;	author neto;	state Exp;
branches;
next	1.109;

1.109
date	97.06.04.20.51.03;	author neto;	state Exp;
branches;
next	1.108;

1.108
date	97.05.23.20.28.49;	author neto;	state Exp;
branches;
next	1.107;

1.107
date	97.05.16.18.11.41;	author neto;	state Exp;
branches;
next	1.106;

1.106
date	97.01.21.21.55.55;	author david;	state Exp;
branches;
next	1.105;

1.105
date	96.09.19.15.26.37;	author neto;	state Exp;
branches;
next	1.104;

1.104
date	96.08.16.13.10.10;	author neto;	state Exp;
branches;
next	1.103;

1.103
date	96.08.16.13.05.00;	author neto;	state Exp;
branches;
next	1.102;

1.102
date	96.07.29.17.08.23;	author neto;	state Exp;
branches;
next	1.101;

1.101
date	96.07.29.16.20.05;	author neto;	state Exp;
branches;
next	1.100;

1.100
date	96.05.29.11.13.18;	author neto;	state Exp;
branches;
next	1.2;

1.2
date	96.03.15.16.00.00;	author neto;	state Exp;
branches;
next	1.1;

1.1
date	96.03.04.13.54.46;	author neto;	state Exp;
branches;
next	;


desc
@Memory manager.
@


1.116
log
@Added the LGPL notice in each file.
@
text
@



\noindent Copyright \copyright 1994, 1995, 1996, 1997, 1998 David Neto
\smallskip

\noindent 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.
\smallskip

\noindent 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.
\smallskip

\noindent   
   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the
   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA  02111-1307, USA.
\smallskip

\noindent   
   You may contact David Neto via email at {\tt netod@@@@acm.org}, or with
   greater latency at
\smallskip
\noindent{\obeylines
     Department of Computer Science
     University of Toronto
     10 King's College Rd.
     Toronto, Ontario
     M5S 3G4
     Canada
}
\medskip


\noindent\hbox{}\hrule\hbox{}\penalty-1000
\vskip0.5cm\relax


@@i webdefs.w
@@i types.w

{\obeylines
$Log: memory.w,v $
Revision 1.115  1998/02/13 21:16:30  neto
Made prototypes and function declarations match w.r.t. const.

Revision 1.114  1997/10/28  20:41:47  neto
Fixed comments to compile.

Revision 1.113  1997/09/27 18:06:21  neto
Fixed RCS log behaviour.

Revision 1.112  1997/08/15  20:18:25  neto
Added Index major section.

Revision 1.111  1997/06/16  16:05:26  neto
Make the report prettier.

Revision 1.110  1997/06/04  20:57:55  neto
Removed const modifiers on some prototypes.  Explicit cast to
size t in mem calloc call.

Revision 1.109  1997/06/04  20:51:03  neto
Added prototype for mem calloc.

Revision 1.108  1997/05/23  20:28:49  neto
Added interface to calloc.

Revision 1.107  1997/05/16  18:11:41  neto
Break locks by david and neto.
Include <config.h> and "lkconfig.h"

Revision 1.106  1997/01/21  21:55:55  david
Added standard copyright notice by including copyrt.w

Revision 1.105  96/09/19  15:26:37  neto
Removed useless "const".

Revision 1.104  96/08/16  13:10:10  neto
Fixed the file reference to fixincludes.h

Revision 1.103  96/08/16  13:05:00  neto
Added fixincludes.

Revision 1.102  96/07/29  17:08:23  neto
Fixed to compile

Revision 1.101  96/07/29  16:20:05  neto
Added *\_rcs\_id.
Made sure RCS log is activated within this file.

}

@@*Memory management.
We treat memory very simply: if we can't allocate the space required,
then just exit the program with a message and error code.

@@c
#include <config.h>
#include "lkconfig.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "fixincludes.h"

#include "error.h"
#include "memory.h"
const char *memory_rcs_id="$Id: memory.w,v 1.115 1998/02/13 21:16:30 neto Exp neto $";

static unsigned long mem_total = 0, mem_max = 0;

void mem_usage_reset(void) { mem_total = 0; }
void mem_deduct(unsigned long n) { mem_total -= n; }
void mem_report(void) {
	printf("Maximum memory usage (UNRELIABLE): %ld bytes\n", mem_max);
}




void *
mem_alloc(const size_t n)
{
	void *p;
	errorif(n<0,"Can't allocate fewer than zero bytes: %d\n",n);
	p=malloc(n);
	errorif(p==NULL,"Couldn't allocate %ld bytes.",(long int)n);
	mem_total += n;
	if ( mem_total > mem_max ) mem_max = mem_total;
	return p;
}

void *
mem_calloc(const size_t nmemb, const size_t size)
{
	void *p;
	errorif(nmemb<0,"Can't allocate fewer than zero elements: %d\n",nmemb);
	errorif(size<0,"Element size can't be negative: %d\n",size);
	p=calloc(nmemb,size);
	errorif(p==NULL,"Couldn't allocate %ld bytes.",(long int)(nmemb*size));
	mem_total += nmemb*size;
	if ( mem_total > mem_max ) mem_max = mem_total;
	return p;
}

void *
mem_realloc(void *ptr, size_t n) {
	void *p;
	errorif(n<0,"Can't allocate fewer than zero bytes: %d\n",n);
	p=realloc(ptr,n);
	errorif(p==NULL,"Couldn't reallocate %ld bytes.",(long int)n);
	mem_total += n;
	if ( mem_total > mem_max ) mem_max = mem_total;
	return p;
}

char *
dup_string( const char *s )
{
	char *p;
	char *strdup(const char *);
	p=strdup(s);
	errorif(p==NULL,"Couldn't duplicate string \"%s\".",s);
	return p;
}
@@ We also supply some macros to make things a little more convenient.

|free_mem(p)| requires |p| to be an lvalue because it ends up
assigning |NULL| to |p|.

@@(memory.h@@>=
extern const char *memory_rcs_id;

void *mem_alloc(const size_t);
void *mem_calloc(const size_t nmemb, const size_t size);
void *mem_realloc(void *,size_t);
char *dup_string(const char *);
void mem_usage_reset(void);
void mem_deduct(unsigned long n);
void mem_report(void);
#define new_of(t)  ((t *)mem_alloc(sizeof(t)))
#define new_arr_of(t,n)  ((t *)mem_alloc(sizeof(t)*(n)))
#define new_arr_of_zero(t,n)  ((t *)mem_calloc((size_t)(n),sizeof(t)))
#define free_mem(p)	do {if (p!=NULL) {free((void *)p);} p = NULL;} while (0)

@@*Index.
@


1.115
log
@Made prototypes and function declarations match w.r.t. const.
@
text
@d1 47
a47 1
@@i copyrt.w
d53 3
d117 1
a117 1
const char *memory_rcs_id="$Id: memory.w,v 1.114 1997/10/28 20:41:47 neto Exp neto $";
@


1.114
log
@Fixed comments to compile.
@
text
@d7 3
d68 1
a68 1
const char *memory_rcs_id="$Id: memory.w,v 1.113 1997/09/27 18:06:21 neto Exp neto $";
d134 2
a135 2
void *mem_alloc(size_t);
void *mem_calloc(size_t nmemb, size_t size);
@


1.113
log
@Fixed RCS log behaviour.
@
text
@d7 3
d18 1
a18 1
size t in mem_calloc call.
d65 1
a65 1
const char *memory_rcs_id="$Id: memory.w,v 1.112 1997/08/15 20:18:25 neto Exp neto $";
@


1.112
log
@Added Index major section.
@
text
@d5 5
a9 1
{\obeylines$Log: memory.w,v $
d62 1
a62 1
const char *memory_rcs_id="$Id: memory.w,v 1.111 1997/06/16 16:05:26 neto Exp neto $";
@


1.111
log
@Make the report prettier.
@
text
@d6 3
d58 1
a58 1
const char *memory_rcs_id="$Id: memory.w,v 1.110 1997/06/04 20:57:55 neto Exp neto $";
d135 2
@


1.110
log
@Removed const modifiers on some prototypes.  Explicit cast to
size t in mem_calloc call.
@
text
@d6 4
d55 1
a55 1
const char *memory_rcs_id="$Id: memory.w,v 1.109 1997/06/04 20:51:03 neto Exp neto $";
d62 1
a62 1
	printf("\n# maximum memory usage was %ld bytes (UNRELIABLE)\n", mem_max);
@


1.109
log
@Added prototype for mem calloc.
@
text
@d6 3
d51 1
a51 1
const char *memory_rcs_id="$Id: memory.w,v 1.108 1997/05/23 20:28:49 neto Exp neto $";
d117 2
a118 2
void *mem_alloc(const size_t);
void *mem_calloc(const size_t nmemb, const size_t size);
d126 1
a126 1
#define new_arr_of_zero(t,n)  ((t *)mem_calloc((n),sizeof(t)))
@


1.108
log
@Added interface to calloc.
@
text
@d6 3
d48 1
a48 1
const char *memory_rcs_id="$Id: memory.w,v 1.107 1997/05/16 18:11:41 neto Exp neto $";
d115 1
@


1.107
log
@Break locks by david and neto.
Include <config.h> and "lkconfig.h"
@
text
@d6 4
d45 1
a45 1
const char *memory_rcs_id="$Id: memory.w,v 1.106 1997/01/21 21:55:55 david Exp david $";
d71 13
d119 1
@


1.106
log
@Added standard copyright notice by including copyrt.w
@
text
@d5 4
a8 1
{\obeylines$Log:	memory.w,v $
d32 2
d41 1
a41 1
const char *memory_rcs_id="$Id: memory.w,v 1.105 96/09/19 15:26:37 neto Exp $";
@


1.105
log
@Removed useless "const".
@
text
@d1 1
d6 3
d36 1
a36 1
const char *memory_rcs_id="$Id: memory.w,v 1.104 96/08/16 13:10:10 neto Exp $";
@


1.104
log
@Fixed the file reference to fixincludes.h
@
text
@d5 3
d32 1
a32 1
const char *memory_rcs_id="$Id: memory.w,v 1.103 96/08/16 13:05:00 neto Exp $";
d86 1
a86 1
void *mem_realloc(void *,const size_t);
@


1.103
log
@Added fixincludes.
@
text
@d5 3
d25 1
a25 1
#include <fixincludes.h>
d29 1
a29 1
const char *memory_rcs_id="$Id: memory.w,v 1.102 96/07/29 17:08:23 neto Exp $";
@


1.102
log
@Fixed to compile
@
text
@d5 3
d22 1
d26 1
a26 1
const char *memory_rcs_id="$Id: memory.w,v 1.101 96/07/29 16:20:05 neto Exp $";
@


1.101
log
@Added *\_rcs\_id.
Made sure RCS log is activated within this file.
@
text
@d4 5
a8 1
{\obeylines$Log$
a15 1
const char memory_rcs_id="$Id$";
d22 1
@


1.100
log
@This version works.  
Needs improvement:
	command-line switches
	faster tabu check
	allow Papadimitriou tabu rule
	faster preprocessing
	different candidate lists
@
text
@d1 6
d12 1
d69 1
@


1.2
log
@Initial implementation of LK.  This is buggy.
@
text
@@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
void mem_report(void) { 
d36 10
d64 1
@
