head	1.25;
access;
symbols
	zero-four-zero:1.25;
locks
	neto:1.25; strict;
comment	@# @;


1.25
date	98.05.23.16.24.54;	author neto;	state Exp;
branches;
next	1.24;

1.24
date	97.12.20.18.40.10;	author neto;	state Exp;
branches;
next	1.23;

1.23
date	97.12.13.19.44.52;	author neto;	state Exp;
branches;
next	1.22;

1.22
date	97.11.15.21.36.28;	author neto;	state Exp;
branches;
next	1.21;

1.21
date	97.06.19.19.51.01;	author neto;	state Exp;
branches;
next	1.20;

1.20
date	97.06.19.19.16.56;	author neto;	state Exp;
branches;
next	1.19;

1.19
date	97.05.21.14.12.05;	author neto;	state Exp;
branches;
next	1.18;

1.18
date	97.05.16.22.29.07;	author neto;	state Exp;
branches;
next	1.17;

1.17
date	97.05.16.21.59.13;	author neto;	state Exp;
branches;
next	1.16;

1.16
date	97.05.16.16.58.16;	author neto;	state Exp;
branches;
next	1.15;

1.15
date	97.05.16.16.53.42;	author neto;	state Exp;
branches;
next	1.14;

1.14
date	97.05.16.16.37.10;	author neto;	state Exp;
branches;
next	1.13;

1.13
date	97.05.16.16.22.47;	author neto;	state Exp;
branches;
next	1.12;

1.12
date	97.05.16.15.51.26;	author neto;	state Exp;
branches;
next	1.11;

1.11
date	97.05.16.15.37.47;	author neto;	state Exp;
branches;
next	1.10;

1.10
date	97.05.16.15.20.02;	author neto;	state Exp;
branches;
next	1.9;

1.9
date	97.05.14.20.51.29;	author neto;	state Exp;
branches;
next	1.8;

1.8
date	97.05.14.20.38.05;	author neto;	state Exp;
branches;
next	1.7;

1.7
date	97.05.14.20.06.50;	author neto;	state Exp;
branches;
next	1.6;

1.6
date	97.05.14.19.18.55;	author neto;	state Exp;
branches;
next	1.5;

1.5
date	97.05.14.18.38.51;	author neto;	state Exp;
branches;
next	1.4;

1.4
date	97.05.14.18.17.54;	author neto;	state Exp;
branches;
next	1.3;

1.3
date	97.05.13.22.29.18;	author neto;	state Exp;
branches;
next	1.2;

1.2
date	97.05.13.20.19.58;	author neto;	state Exp;
branches;
next	1.1;

1.1
date	97.05.13.20.08.19;	author neto;	state Exp;
branches;
next	;


desc
@Input to automake to create Makefile.in that is processed by configure
to create Makefile, the makefile to create the program LK.
@


1.25
log
@Added ascend, for Held-Karp lower bounds.
Added dsorttest, prng, match.
@
text
@## Process this file with automake to produce Makefile.in
# Makefile for generating binary program LK from sources.
# $Id: Makefile.am,v 1.24 1997/12/20 18:40:10 neto Exp neto $

##   Copyright (C) 1994, 1995, 1996, 1997 David Neto
##
##   This program is free software; you can redistribute it and/or modify
##   it under the terms of the GNU General Public License as published by
##   the Free Software Foundation; either version 2, or (at your option)
##   any later version.
##
##   This program is distributed in the hope that it will be useful,
##   but WITHOUT ANY WARRANTY; without even the implied warranty of
##   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##   GNU General Public License for more details.
##
##   You should have received a copy of the GNU General Public License
##   along with this program; if not, write to the Free Software
##   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
##   02111-1307, USA.

## AUTOMAKE_OPTIONS = no-dependencies 

## These .w files are the *real* sources.
## File cwebmac.tex is required to typeset CWEB programs.  It is taken from
## the CWEB distribution.
EXTRA_DIST = \
	array.w construct.w copyrt.w decluster.w dict.w distcalc.w dsort.w \
	error.w fixincludes.w gb_flip.w gb_flip.ch \
	fullgrid.w ifs.w jbmr.w kdtree.w \
	length.w lk.w memory.w nn.w pool.w read.w resource.w sier.w tspgen.w \
	twolevel.w types.w unifd.w webdefs.w \
	cwebmac.tex compile.c.in \
	prng.w prngconfig.h \
	jitter.w \
	shake.w \
	prolog.ps \
	mkcwebch.pl \
	tspps.w \
	match.w \
	ascend.w \
# Stanford GraphBase's boilerplate file.
	boilerplate.w

# Docs should also include ifs.dvi, but that also needs
# fern.eps nicecloud.eps tropicalfish.eps tropicalfisheye.eps

DOCS = array.dvi construct.dvi decluster.dvi dict.dvi distcalc.dvi dsort.dvi \
	error.dvi fixincludes.dvi gb_flip.dvi \
	fullgrid.dvi jbmr.dvi kdtree.dvi \
	length.dvi lk.dvi memory.dvi nn.dvi pool.dvi read.dvi resource.dvi  \
	sier.dvi tspgen.dvi \
	twolevel.dvi unifd.dvi \
	prng.dvi \
	jitter.dvi \
	shake.dvi \
	tspps.dvi \
	match.dvi \
	ascend.dvi \
	upper.dvi

bin_PROGRAMS = lk tspgen jitter tspps shake \
	ifs fullgrid unifd sier distcalc \
	dsorttest dicttest declustertest test_flip prngtest 

TESTS = test_flip dicttest declustertest prngtest dsorttest

lk_SOURCES = \
	array.c \
	array.h \
	construct.c \
	construct.h \
	declevel.h \
	decluster.c \
	decluster.h \
	dict.c \
	dict.h \
	dsort.c \
	dsort.h \
	error.c \
	error.h \
	fixincludes.h \
	gb_flip.c \
	gb_flip.h \
	jbmr.c \
	jbmr.h \
	kdtree.c \
	kdtree.h \
	length.h \
	match.c \
	match.h \
	lk.c \
	lk.h \
	lkconfig.h \
	memory.c \
	memory.h \
	nn.c \
	nn.h \
	pool.c \
	pool.h \
	prng.c \
	prng.h \
	read.c \
	read.h \
	resource.c \
	resource.h \
	twolevel.c \
	twolevel.h \
	ascend.c \
	ascend.h \
	compile.c 

tspgen_SOURCES = \
	dsort.c \
	dsort.h \
	error.c \
	error.h \
	memory.c \
	memory.h \
	gb_flip.c \
	gb_flip.h \
	tspgen.c

# read needs gb_flip.
tspps_SOURCES = \
	length.h \
	error.c \
	error.h \
	memory.c \
	memory.h \
	gb_flip.c \
	gb_flip.h \
	read.c \
	read.h \
	tspps.c

jitter_SOURCES = \
	decluster.h \
	decluster.c \
	dict.h \
	dict.c \
	dsort.c \
	dsort.h \
	error.c \
	error.h \
	kdtree.c \
	kdtree.h \
	memory.c \
	memory.h \
	gb_flip.c \
	gb_flip.h \
	pool.c \
	pool.h \
	prng.c \
	prng.h \
	prngconfig.h \
	read.h \
	read.c \
	jitter.c

shake_SOURCES = \
	decluster.h \
	decluster.c \
	dict.h \
	dict.c \
	dsort.c \
	dsort.h \
	error.c \
	error.h \
	kdtree.c \
	kdtree.h \
	memory.c \
	memory.h \
	gb_flip.c \
	gb_flip.h \
	pool.c \
	pool.h \
	prng.c \
	prng.h \
	prngconfig.h \
	read.h \
	read.c \
	shake.c

dist-hook : 
	rm -f $(distdir)/compile.c
	cp -r RCS $(distdir)


ifs_SOURCES = gb_flip.c gb_flip.h ifs.c
unifd_SOURCES = gb_flip.c gb_flip.h unifd.c
sier_SOURCES = gb_flip.c gb_flip.h sier.c
fullgrid_SOURCES = fullgrid.c
distcalc_SOURCES = error.h error.c memory.h memory.c read.c read.h \
	gb_flip.h gb_flip.c \
	length.h distcalc.c


BUILT_SOURCES = \
	array.c \
	array.h \
	compile.c \
	construct.c \
	construct.h \
	decluster.c \
	decluster.h \
    declustertest.c \
	dict.c \
	dict.h \
	dicttest.c \
	distcalc.c \
	dsort.c \
	dsort.h \
	dsorttest.c \
	error.c \
	error.h \
	fixincludes.h \
	gb_flip.c \
	gb_flip.h \
	fullgrid.c \
	ifs.c \
	jbmr.c \
	jbmr.h \
	kdtree.c \
	kdtree.h \
	length.h \
	lk.c \
	lk.h \
	memory.c \
	memory.h \
	nn.c \
	nn.h \
	pool.c \
	pool.h \
	prng.c \
	prng.h \
	prngtest.c \
	read.c \
	read.h \
	resource.c \
	resource.h \
	sier.c \
	test_flip.c \
	tspgen.c \
	twolevel.c \
	twolevel.h \
	unifd.c


# Programs required to process the .w sources.
# ctangle makes .w into .c and .h  (not necessarily both or either)
# cweave makes .w into .tex (.idx and .scn)
# tex makes .tex (and .idx and .scn) into .dvi
CTANGLE = @@CTANGLE@@
CWEAVE = @@CWEAVE@@
TEX = @@TEX@@

# Get default flags from confgure
CTANGLEFLAGS_DEFAULT = @@CTANGLEFLAGS_DEFAULT@@
CWEAVEFLAGS_DEFAULT = @@CWEAVEFLAGS_DEFAULT@@


# FIXME: separate tests 
test_flip_SOURCES = test_flip.c gb_flip.c gb_flip.h
dsorttest_SOURCES = dsort.c dsorttest.c
dicttest_SOURCES = dicttest.c dict.c dict.h \
	error.c memory.c pool.c gb_flip.c \
	error.h memory.h pool.h gb_flip.h 
declustertest_SOURCES = declustertest.c decluster.c decluster.h \
	dict.c dict.h resource.c resource.h \
	error.c memory.c pool.c gb_flip.c kdtree.c read.c dsort.c \
	error.h memory.h pool.h gb_flip.h kdtree.h read.h dsort.h 

# If your compiler does not have inlining, then add prng.c to this list.
prngtest_SOURCES = error.c error.h memory.c memory.h gb_flip.c gb_flip.h \
	prng.c prng.h prngtest.c fixincludes.h

# All the DVI documentation is generated from the program sources.
docs : $(DOCS)

#########################################################################
# Implicit rules.
# .ch  -- CWEB change files; implicit .ch rules should precede implicit .w rules
# .w   -- CWEB files
# .tex -- TeX files
# .scn -- generated by CWEAVE and used by TeX to typeset programs
# .idx -- index files generated by CWEAVE and used by TeX to typeset programs
# .dvi -- device independent typeset files generated by TeX

SUFFIXES = .ch .w .c .h .o .tex .scn .idx .dvi

# When to run ctangle
.ch.c :
	@@CTANGLE_CMD@@

.w.c :
	@@CTANGLE_CMD@@

# Maybe need to fix this kludge for headers?
.ch.h :
	@@CTANGLE_CMD@@

.w.h :
	@@CTANGLE_CMD@@

# When to run cweave
.w.tex :
	@@CWEAVE_CMD@@
	
.w.idx :
	@@CWEAVE_CMD@@

.w.scn :
	@@CWEAVE_CMD@@

# When to run TeX
# We put $(srcdir) on TEXINPUTS path because it contains cwebmac.tex, which
# is required to typeset CWEB programs.
.tex.dvi :
	(TEXINPUTS=$(TEXINPUTS):$(srcdir);@@TEX_CMD@@)
 

@


1.24
log
@Added programs tspps and shake.
Beginning to add match.w to LK.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.23 1997/12/13 19:44:52 neto Exp neto $
d41 1
d58 3
a60 1
	match.dvi
d63 2
a64 1
	ifs fullgrid unifd sier distcalc dicttest declustertest test_flip prngtest
d66 1
a66 1
TESTS = test_flip dicttest declustertest prngtest
d90 2
d101 2
d109 2
d214 1
d265 1
@


1.23
log
@Added docs target, and jitter.
Removed dependence on resource for those modules depending on error.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.22 1997/11/15 21:36:28 neto Exp neto $
d36 1
d39 2
d54 4
a57 1
	jitter.dvi
d59 1
a59 1
bin_PROGRAMS = lk tspgen jitter \
d114 13
d128 4
d150 24
@


1.22
log
@Stripped out old stuff finally.
Added gb flip.ch, prolog.ps, and support for tspgen
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.21 1997/06/19 19:51:01 neto Exp neto $
d34 2
d37 1
d41 2
a42 2
bin_PROGRAMS = lk tspgen \
	ifs fullgrid unifd sier distcalc dicttest declustertest test_flip
d44 13
a56 1
TESTS = test_flip dicttest declustertest
d98 2
a103 2
	resource.c \
	resource.h \
d108 20
d139 1
a139 1
	resource.h resource.c length.h distcalc.c
d177 3
d208 2
a209 2
	error.c memory.c pool.c gb_flip.c resource.c \
	error.h memory.h pool.h gb_flip.h resource.h
d211 7
a217 3
	dict.c dict.h \
	error.c memory.c pool.c gb_flip.c resource.c kdtree.c read.c dsort.c \
	error.h memory.h pool.h gb_flip.h resource.h kdtree.h read.h dsort.h 
d219 2
@


1.21
log
@doit, doitcmp are renamed and put into scripts.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.20 1997/06/19 19:16:56 neto Exp neto $
d29 3
a31 2
	error.w fixincludes.w gb_flip.w grid.w ifs.w jbmr.w kdtree.w \
	length.w lk.w memory.w nn.w pool.w read.w resource.w sier.w \
d33 4
a36 1
	cwebmac.tex compile.c.in
d38 2
a39 1
bin_PROGRAMS = lk ifs grid unifd sier distcalc dicttest declustertest test_flip
d82 11
d101 1
a101 1
grid_SOURCES = grid.c
d127 1
a127 1
	grid.c \
d148 1
a219 108
## #########################################################################
## # Programs.
## 
## # For SGI machines
## #  I Use -xansi instead of -ansi so that some intrinsics are inlined.  hypot?
## #SGIWARNINGS = -fullwarn -xansi
## # Turn warnings off if compiling for COFF.
## SGIWARNINGS =  -xansi
## #CC = cc $(SGIWARNINGS) 
## # The following is for Luk's experiments
## #CC = cc $(SGIWARNINGS) -non_shared
## 
## 
## # For speed tests
## # 	On the SPARCs, use
## #OPTIMIZE = -O2
## #	On the RS6K, use
## #OPTIMIZE = -O3 -qstrict
## #   for ordinary debugging, use
## #OPTIMIZE = -pg -g
## #	for profiling, add -pg
## OPTIMIZE = -O
## #OPTIMIZE = -O3
## #OPTIMIZE = -O2
## #OPTIMIZE =
## LINKOPTIMIZE = -O2	
## # IRIX linker doesn't like -O3; it asks for -O2 or lower.
## 
## 
## 
## #  Use the following for SunOS and IRIX
## #SYSTEM_FIXES = -DFIX_INCLUDES
## SYSTEM_FIXES = 
## 
## #  SunOS 5.4 is broken because it puts definition of struct rusage in
## #  sys/rusage.h instead of sys/resource.h
## #  You might also need to add /usr/ucblib to LD_LIBRARY_PATH
## OS_VERSION_MAJOR = `uname -r | sed -e "s/\\([0-9]*\\)\\..*/\\1/"`
## OS_VERSION_MINOR = `uname -r | sed -e "s/[0-9]*\\.\\([0-9]*\\).*/\\1/"`
## 
## SYSTEM_FIXES += -DOS_VERSION_MAJOR=$(OS_VERSION_MAJOR) -DOS_VERSION_MINOR=$(OS_VERSION_MINOR)
## SOLARIS_BSD_LIB = -L/usr/ucblib -lucb
## #SOLARIS_BSD_LIB = 
## 
## CFLAGS = $(OPTIMIZE) $(DEBUG) $(TABU) $(SYSTEM_FIXES) $(OUTPUT)
## #LINKFLAGS = $(LINKOPTIMIZE) $(SOLARIS_BSD_LIB)
## LINKFLAGS = $(LINKOPTIMIZE)
## 
## COMPILE = $(CC) $(C_DIALECT) $(C_WARNINGS) $(CFLAGS)
## 
## 
## #########################################################################
## # File sets.
## 
## UTILITIES = \
## 	$(srcdir)/countpages \
## 	$(srcdir)/distcalc.w \
## 	$(srcdir)/unifd.w \
## 	$(srcdir)/grid.w \
## 	$(srcdir)/sier.w \
## 	$(srcdir)/ifs.w \
## 	$(srcdir)/doitfly.double \
## 	$(srcdir)/*.pl
## 
## RCSSTUFF = $(srcdir)/RCS/*
## 
## 
## 
## compile.c : $(SOURCES) Makefile
## 	rm -f compile.o compile.c
## 	echo const char \*compile=\" $(COMPILE) $(CFLAGS) \"\; >compile.c
## 
## 
## test :
## 	rm -f /tmp/neto.out.test
## 	unif.sparc 62 100000 failure | lk.sparc -v 125 - -S dsort -r two-level --noround >/tmp/neto.out.test
## 
## striphashline : $(CSOURCES)
## 	striphashline.pl gb_flip.c
## 	striphashline.pl error.c 
## 	striphashline.pl memory.c 
## 	striphashline.pl read.c 
## 	striphashline.pl resource.c 
## 	striphashline.pl pool.c 
## 	striphashline.pl kdtree.c 
## 	striphashline.pl construct.c 
## 	striphashline.pl array.c 
## 	striphashline.pl twolevel.c 
## 	striphashline.pl dsort.c 
## 	striphashline.pl nn.c 
## 	striphashline.pl dict.c 
## 	striphashline.pl jbmr.c 
## 	striphashline.pl lk.c 
## 	striphashline.pl gb_flip.h
## 	striphashline.pl error.h
## 	striphashline.pl memory.h
## 	striphashline.pl read.h
## 	striphashline.pl resource.h
## 	striphashline.pl pool.h
## 	striphashline.pl kdtree.h
## 	striphashline.pl construct.h
## 	striphashline.pl array.h
## 	striphashline.pl twolevel.h
## 	striphashline.pl dsort.h
## 	striphashline.pl nn.h
## 	striphashline.pl dict.h
## 	striphashline.pl jbmr.h
## 	striphashline.pl lk.h
@


1.20
log
@Added declustertest so that it actually builds.
Added declevel.h to the suite.
Added a TESTS variable for automatic self-check on "make check"
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.19 1997/05/21 14:12:05 neto Exp neto $
d32 1
a32 2
	cwebmac.tex compile.c.in \
	doit doitcmp.in
@


1.19
log
@Added support for decluster.w
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.18 1997/05/16 22:29:07 neto Exp neto $
d32 2
a33 1
	cwebmac.tex compile.c.in
d35 1
a35 1
bin_PROGRAMS = lk ifs grid unifd sier distcalc dicttest test_flip
d37 2
d44 1
d100 1
d156 4
@


1.18
log
@Ensure that compile.c.in ends up in the distribution.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.17 1997/05/16 21:59:13 neto Exp neto $
d28 4
a31 4
	array.w construct.w copyrt.w dict.w distcalc.w dsort.w error.w \
	fixincludes.w gb_flip.w grid.w ifs.w jbmr.w kdtree.w length.w \
	lk.w memory.w nn.w pool.w read.w resource.w sier.w twolevel.w \
	types.w unifd.w webdefs.w \
d41 2
d94 2
@


1.17
log
@Make compile.c generated at configure time, not compile time.
This should save a lot of computational effort, but is a bit
more fragile: it can get fooled if the user changes the complie
flags directly in the Makefile.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.16 1997/05/16 16:58:16 neto Exp neto $
d32 1
a32 1
	cwebmac.tex
@


1.16
log
@Add all the RCS files to the distribution.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.15 1997/05/16 16:53:42 neto Exp neto $
d32 1
a32 2
	cwebmac.tex \
	RCS/*
a38 1
	compile.c \
d69 2
a70 1
	twolevel.h 
a71 25
PRIMARY_LK_OBJECTS = \
	array.o \
	construct.o \
	dict.o \
	dsort.o \
	error.o \
	gb_flip.o \
	jbmr.o \
	kdtree.o \
	lk.o \
	memory.o \
	nn.o \
	pool.o \
	read.o \
	resource.o \
	twolevel.o 


# LK has the ability to print out its own compile and link options.
compile.c : $(PRIMARY_LK_OBJECTS)
	rm -f compile.c
	echo '/* This file is automatically generated at compile time. */' >compile.c
	echo const char \*compile_compile=\" $(COMPILE) \"\; >>compile.c
	echo const char \*compile_link=\" $(LINK) \"\; >>compile.c

d74 1
@


1.15
log
@Make compile.c a Built Source so that it is cleaned when doing a
maintainer-clean.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.14 1997/05/16 16:37:10 neto Exp neto $
d32 2
a33 1
	cwebmac.tex
@


1.14
log
@Removed duplicated dict.c in dicttest sources list.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.13 1997/05/16 16:22:47 neto Exp neto $
d113 1
@


1.13
log
@Fix support for distcalc.
Try to fix support for dicttest.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.12 1997/05/16 15:51:26 neto Exp neto $
d168 2
a169 2
	error.c memory.c pool.c dict.c gb_flip.c resource.c \
	error.h memory.h pool.h dict.h gb_flip.h resource.h
@


1.12
log
@Add compile.c to thelist of lk sources.
But remove it from the distribution.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.11 1997/05/16 15:37:47 neto Exp neto $
d105 3
a107 1
distcalc_SOURCES = read.c read.h length.h distcalc.c
d109 1
d167 3
a169 3
dicttest_SOURCES = dicttest.c \
	error.c memory.c pool.c dict.c gb_flip.c \
	error.h memory.h pool.h dict.h gb_flip.h
@


1.11
log
@Put support back in for compile.o
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.10 1997/05/16 15:20:02 neto Exp neto $
d39 1
d89 2
d96 4
@


1.10
log
@Added support for lkconfig.h
Removed support for compile.o
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.9 1997/05/14 20:51:29 neto Exp neto $
d70 23
@


1.9
log
@Added lk options makefile.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.8 1997/05/14 20:38:05 neto Exp neto $
d32 1
a32 2
	cwebmac.tex \
	Makefile.lk.options
d57 1
a117 2
# Control the behaviour of LK through compile-time options.
include $(srcdir)/Makefile.lk.options
a234 84
## MAINSOURCES = \
## 	$(srcdir)/copyrt.w \
## 	$(srcdir)/webdefs.w \
## 	$(srcdir)/prolog.ps \
## 	$(srcdir)/error.w \
## 	$(srcdir)/memory.w \
## 	$(srcdir)/read.w \
## 	$(srcdir)/resource.w \
## 	$(srcdir)/pool.w \
## 	$(srcdir)/kdtree.w \
## 	$(srcdir)/construct.w \
## 	$(srcdir)/array.w \
## 	$(srcdir)/twolevel.w \
## 	$(srcdir)/dsort.w \
## 	$(srcdir)/nn.w \
## 	$(srcdir)/dict.w \
## 	$(srcdir)/jbmr.w \
## 	$(srcdir)/lk.w
## 
## SOURCES = \
## 	$(srcdir)/gb_flip.ch \
## 	$(srcdir)/length.w \
## 	$(srcdir)/fixincludes.w \
## 	$(MAINSOURCES)
## 
## CSOURCES = \
## 	error.c \
## 	memory.c \
## 	read.c \
## 	resource.c \
## 	pool.c \
## 	kdtree.c \
## 	construct.c \
## 	array.c \
## 	twolevel.c \
## 	dsort.c \
## 	nn.c \
## 	dict.c \
## 	jbmr.c \
## 	lk.c \
## 	gb_flip.c
## 
## AUXCSOURCES = \
## 	ifs.c \
## 	unifd.c
## 
## OBJS = \
## 	error.o \
## 	memory.o \
## 	read.o \
## 	resource.o \
## 	pool.o \
## 	kdtree.o \
## 	construct.o \
## 	array.o \
## 	twolevel.o \
## 	dsort.o \
## 	nn.o \
## 	dict.o \
## 	jbmr.o \
## 	lk.o
## 
## DVIS = \
## 	error.dvi \
## 	memory.dvi \
## 	length.dvi \
## 	read.dvi \
## 	resource.dvi \
## 	pool.dvi \
## 	kdtree.dvi \
## 	construct.dvi \
## 	array.dvi \
## 	twolevel.dvi \
## 	dsort.dvi \
## 	nn.dvi \
## 	dict.dvi \
## 	jbmr.dvi \
## 	lk.dvi \
## 	fixincludes.dvi \
## 	sier.dvi \
## 	unifd.dvi \
## 	ifs.dvi
## 
## 
a252 6
## Makefile :
## 	echo Making makefile for compile.c
## 
## out: lk
## 	rm -f out
## 	lk run/lin318.tsp -r tld >out
a256 15
## 
## docs : $(DVIS)
## 
## csources : $(CSOURCES)
## 	wc $(CSOURCES)
## 
## dicttest : gb_flip.o pool.o dicttest.o dict.o error.o memory.o resource.o
## 	$(COMPILE) gb_flip.o pool.o dicttest.o dict.o error.o memory.o resource.o -o dicttest
## 
## dicttest.c : $(srcdir)/dict.w
## 	$(CTANGLE_CMD) $(srcdir)/dict.w
## 
## $(MAINSOURCES) : $(srcdir)/length.h
## $(MAINSOURCES) : $(srcdir)/fixincludes.h
## 
@


1.8
log
@test_flip and dicttest are now built properly.
Added support for dependencies on .ch files.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.7 1997/05/14 20:06:50 neto Exp neto $
d32 2
a33 1
	cwebmac.tex
@


1.7
log
@Try to support .ch files as dependencies.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.6 1997/05/14 19:18:55 neto Exp neto $
d34 1
a34 1
bin_PROGRAMS = lk ifs grid unifd sier distcalc
d133 1
a133 1
# FIXME do tests
d135 3
a138 5
test_flip.c : gb_flip.w
	@@CTANGLE_CMD@@

dicttest.c : dict.w
	@@CTANGLE_CMD@@
d142 1
d149 1
a149 1
SUFFIXES = .w .c .h .o .tex .scn .idx .dvi
d152 3
d158 2
a159 1
.ch.c :
a161 1
# Maybe need to fix this kludge for headers?
@


1.6
log
@Now it builds .dvi files properly.
ctangle, tex, and cweave commands are given by configure depending
on whether those cmds can be found.
cwebmac.tex is included in the distribution.
Make all the .w files be part of the distribution.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.5 1997/05/14 18:38:51 neto Exp neto $
d77 7
a83 3
	array.c array.h \
	construct.c construct.h \
	dict.c dict.h dicttest.c \
d85 4
a88 2
	dsort.c dsort.h \
	error.c error.h \
d90 2
a91 1
	gb_flip.c gb_flip.h \
d94 4
a97 2
	jbmr.c jbmr.h \
	kdtree.c kdtree.h \
d99 12
a110 6
	lk.c lk.h \
	memory.c memory.h \
	nn.c nn.h \
	pool.c pool.h \
	read.c read.h \
	resource.c resource.h \
d113 2
a114 1
	twolevel.c twolevel.h \
d132 1
d134 2
d154 3
@


1.5
log
@Sorted the sources list.  The list was prematurey ended by a missing
line continuing backslash.  That is now fixed.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.4 1997/05/14 18:17:54 neto Exp neto $
d24 10
d68 1
a68 1
	twolevel.h \
d101 2
a102 3
## # Catch config.h
## INCLUDES= -I$(top_srcdir)

d116 6
d152 2
d155 1
a155 1
	@@TEX_CMD@@
a187 11
## 
## #########################################################################
## # Set variables DEBUG, OUTPUT, TABU
## 
## include Makefile.lk.options
## 
## 
## #########################################################################
## # System fixes.
## 
## 
a308 24
## #########################################################################
## # Package-specific targets.
## 
## all : lk
## 
## lk : gb_flip.o $(OBJS) compile.o
## 	$(COMPILE) $(LINKFLAGS) -o lk gb_flip.o compile.o $(OBJS) -lm
## 
## lk.sgi.jsg : lk
## 	mv lk lk.sgi.jsg
## 
## pagecount : $(DVIS)
## 	wc *.log
## 
## linecount : $(CSOURCES) $(AUXCSOURCES)
## 	wc $(CSOURCES) $(AUXCSOURCES)
## 
## 
## 	
## unifd : unifd.o gb_flip.o
## 	$(COMPILE) unifd.o gb_flip.o -o unifd
## 
## unif : unif.o gb_flip.o
## 	$(COMPILE) unif.o gb_flip.o -o unif
a309 9
## sier : sier.o gb_flip.o
## 	$(COMPILE) sier.o gb_flip.o -o sier -lm
## 
## ifs : ifs.o gb_flip.o
## 	$(COMPILE) ifs.o gb_flip.o -o ifs -lm
## 
## #grid : grid.o
## #	$(COMPILE) grid.o -o grid
## 
a320 27
## # Force the genereration of error.h when error.w has changed.
## error.h : error.c
## 
## length.h : length.w
## 	$(CTANGLE_CMD) length.w
## 
## dict.h : dict.w
## 	$(CTANGLE_CMD) dict.w
## 
## gb_flip.o : gb_flip.h gb_flip.c
## 	$(COMPILE) $(CFLAGS) -c gb_flip.c
## 
## gb_flip.h : gb_flip.ch
## 	$(CTANGLE_CMD) gb_flip.w gb_flip.ch
## 
## gb_flip.c : gb_flip.ch
## 	$(CTANGLE_CMD) gb_flip.w gb_flip.ch
## 
## # Force the genereration of memory.h when memory.w has changed.
## memory.h : memory.c
## 
## tgz :
## 	rm -f lk.tar.gz
## 	tar cvf lk.tar $(SOURCES) $(RCSSTUFF) $(UTILITIES) Makefile
## 	gzip --best lk.tar
## 
## 
a324 3
## distcalc : distcalc.o read.o error.o resource.o memory.o gb_flip.o 
## 	$(COMPILE) -o distcalc distcalc.o read.o error.o resource.o memory.o gb_flip.o -lm
## 
a370 24
## 
## 
## 
## #########################################################################
## # Standard GNU targets -- see the GNU Coding Standards.
## #
## # all : # see above
## 
## install : lk
## 
## clean : 
## 	rm -f core *.o *.dvi *.idx *.log *.scn *.toc
## 	$(CTANGLE_CMD) error.w
## 	$(CTANGLE_CMD) length.w
## 	$(CTANGLE_CMD) memory.w
## 	$(CTANGLE_CMD) fixincludes.w
## 	$(CTANGLE_CMD) lk.w
## 
## maintainer-clean:
## 	rm -f $(CSOURCES) $(AUXCSOURCES)
## 
## veryclean : maintainer-clean
## 
## 
@


1.4
log
@configure tells us what CTANGLE_CMD, CWEAVE_CMD, and TEX_CMD should
be.
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.3 1997/05/13 22:29:18 neto Exp neto $
d24 1
a24 1
bin_PROGRAMS = lk ifs unifd sier distcalc
d27 1
a27 1
	memory.h \
d29 1
a29 1
	dsort.h \
d31 1
d33 4
d38 3
a40 1
	error.h \
d42 4
a45 4
	gb_flip.h \
	nn.h \
	pool.h \
	twolevel.h \
a46 4
	length.h \
	kdtree.h \
	resource.h \
	read.h \
d48 1
a48 8
	array.c \
	dsort.c \
	construct.c \
	dict.c \
	ifs.c \
	error.c \
	jbmr.c \
	gb_flip.c \
d50 1
d52 5
d58 1
a58 5
	lk.c \
	kdtree.c \
	resource.c \
	grid.c \
	read.c
d63 1
@


1.3
log
@Fixed dependency list for unifd and sier
@
text
@d3 1
a3 1
# $Id: Makefile.am,v 1.2 1997/05/13 20:19:58 neto Exp neto $
d104 3
a106 2
CTANGLEFLAGS = -bhp # Turn off banner, happy, progress messages
CTANGLE_CMD = $(CTANGLE) $(CTANGLEFLAGS)
d108 1
d111 5
a115 2
# .w files are CWEB files.
# .idx files are index files for CWEAVE.
d117 1
a117 2
.SUFFIXES : 
.SUFFIXES : .w .c .h .o .tex .scn .idx .dvi
d121 1
a121 8
	if test -z "$(CTANGLE)"; then
		@@echo "Sorry, ctangle is not installed, so I can't make $@@ from $<" 1>&2
		exit 1;
	else
		if test -f $(srcdir)/$*.ch; then $(CTANGLE_CMD) $< $(srcdir)/$*.ch;
		else $(CTANGLE_CMD) $(srcdir)/$<;
		fi
	fi
d125 1
a125 8
	if test -z "$(CTANGLE)"; then
		@@echo "Sorry, ctangle is not installed, so I can't make $@@ from $<" 1>&2
		exit 1;
	else
		if test -f $(srcdir)/$*.ch; then $(CTANGLE_CMD) $< $(srcdir)/$*.ch;
		else $(CTANGLE_CMD) $(srcdir)/$<;
		fi
	fi
d128 2
a129 9
.w.tex : webdefs.w copyrt.w
	if test -z "$(CWEAVE)"; then
		@@echo "Sorry, cweave is not installed, so I can't make $@@ from $<" 1>&2
		exit 1;
	else
		if test -f $(srcdir)/$*.ch; then $(CWEAVE_CMD) $< $(srcdir)/$*.ch; 
		else $(CWEAVE_CMD) $(srcdir)/$<; 
		fi
	fi
d131 5
a135 19
.w.idx : webdefs.w copyrt.w
	if test -z "$(CWEAVE)"; then
		@@echo "Sorry, cweave is not installed, so I can't make $@@ from $<" 1>&2
		exit 1;
	else
		if test -f $(srcdir)/$*.ch; then $(CWEAVE_CMD) $< $(srcdir)/$*.ch; 
		else $(CWEAVE_CMD) $(srcdir)/$<; 
		fi
	fi

.w.scn : webdefs.w copyrt.w
	if test -z "$(CWEAVE)"; then
		@@echo "Sorry, cweave is not installed, so I can't make $@@ from $<" 1>&2
		exit 1;
	else
		if test -f $(srcdir)/$*.ch; then $(CWEAVE_CMD) $< $(srcdir)/$*.ch; 
		else $(CWEAVE_CMD) $(srcdir)/$<; 
		fi
	fi
d138 2
a139 7
.tex.dvi : $*.idx $*.scn
	if test -z "$(TEX)"; then
		@@echo "Sorry, TeX is not installed, so I can't make $@@ from $<" 1>&2
		exit 1;
	else
		$(TEX) $(srcdir)/$<; 
	fi
@


1.2
log
@lk_SOURCES should list .c and .h files, not .w files.
Must figure out a way to generate .c and .h from .w...
@
text
@d3 1
a3 1
# $Id$
d22 2
d63 2
a64 2
unifd_SOURCES = gb_flip.w gb_flip.h unifd.c
sier_SOURCES = gb_flip.w gb_flip.h sier.c
@


1.1
log
@Initial revision
@
text
@d3 1
d25 34
a58 17
	copyrt.w \
	webdefs.w \
	types.w \
	error.w \
	memory.w \
	read.w \
	resource.w \
	pool.w \
	kdtree.w \
	construct.w \
	array.w \
	twolevel.w \
	dsort.w \
	nn.w \
	dict.w \
	jbmr.w \
	lk.w
d60 4
a63 5
ifs_SOURCES = gb_flip.w ifs.w
unifd_SOURCES = gb_flip.w unifd.w
sier_SOURCES = gb_flip.w sier.w
## length.h, really
distcalc_SOURCES = read.w length.w distcalc.w
@
