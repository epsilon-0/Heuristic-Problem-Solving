head	1.13;
access;
symbols
	zero-four-zero:1.13;
locks
	neto:1.13;


1.13
date	98.05.21.19.29.35;	author neto;	state Exp;
branches;
next	1.12;

1.12
date	98.05.21.19.17.47;	author neto;	state Exp;
branches;
next	1.11;

1.11
date	95.11.17.16.06.03;	author neto;	state Exp;
branches;
next	1.10;

1.10
date	95.03.23.13.53.58;	author neto;	state Exp;
branches;
next	1.9;

1.9
date	95.01.24.12.59.59;	author neto;	state Exp;
branches;
next	;


desc
@PostScript debugging output.
@


1.13
log
@Fixed up standard CWEB thingies and Log stuff.
@
text
@@@i webdefs.w
@@i copyrt.w
@@i types.w

{\obeylines
$Log$
}


@@*Graphical debugging output of 1-trees.
We use PostScript to generate pictures of the graph as we go along.

@@c
#include <stdio.h>
#include "tsp.h"

@@<Subroutines@@>@@;


@@ The header file.
@@(debug.h@@>=
@@<Exported routines@@>@@;

@@ Showing a graph.
@@<Subroutines@@>=

int pageno = 1;

void
show_onetree(FILE *debug_ps, const char *msg, const int n, search_node_t *bbnode,
	const edge_list_t *edge) 
{
	int i;
	search_node_t *b;

	if ( debug == NULL ) return;
	
	fprintf(debug_ps,"%%%%Page: %d %d\n", pageno, pageno);
	fprintf(debug_ps,"(%s) title\n", msg==NULL?"":msg);
	
	for ( b = bbnode ; b ; b = b->parent )
		fprintf(debug_ps,"%d %d %s\n", b->e.from, b->e.to, 
			b->in_out==FIXED_IN ? "inedge" : "outedge");
	
	for (i=0;i<n;i++)
		fprintf(debug_ps,"%d %d edge\n", edge[i].e.from, edge[i].e.to);

	fprintf(debug_ps,"drawcities showpage\n");
	fflush(debug_ps);
	pageno++;
}

void
show_tour(FILE *debug_ps, const char *msg, const int n, int *tour )
{
	int i;
	char page_name[20];
	
	if ( debug_ps == NULL ) return;

	fprintf(debug_ps,"%%%%Page: %d %d\n", pageno, pageno);
	fprintf(debug_ps,"(%s) title\n", msg==NULL?"":msg);
	
	for (i=0;i<n;i++)
		fprintf(debug_ps,"%d %d edge\n", tour[i], tour[(i+1)%n]);

	fprintf(debug_ps,"drawcities showpage\n");
	fflush(debug_ps);
	pageno++;
}

@@
@@<Exported routines@@>=
void show_tour(FILE *debug_ps, const char *name, const int n, int *tour );
void show_onetree(FILE *debug_ps, const char *name, const int n, search_node_t *bbnode,
	const edge_list_t *edge);
@


1.12
log
@Take the PS file handle as the first argument always.
@
text
@d1 9
@


1.11
log
@Last revision before depth paper.
@
text
@d1 1
a1 1
@@*Graphical debugging output.
d21 1
a21 1
show_onetree(const char *msg, const int n, search_node_t *bbnode,
a25 1
	extern FILE *debug;
d29 2
a30 2
	fprintf(debug,"%%%%Page: %d %d\n", pageno, pageno);
	fprintf(debug,"(%s) title\n", msg==NULL?"":msg);
d33 1
a33 1
		fprintf(debug,"%d %d %s\n", b->e.from, b->e.to, 
d37 1
a37 1
		fprintf(debug,"%d %d edge\n", edge[i].e.from, edge[i].e.to);
d39 2
a40 2
	fprintf(debug,"drawcities showpage\n");
	fflush(debug);
d45 1
a45 1
show_tour(const char *msg, const int n, int *tour )
a47 1
	extern FILE *debug;
d50 1
a50 1
	if ( debug == NULL ) return;
d52 2
a53 2
	fprintf(debug,"%%%%Page: %d %d\n", pageno, pageno);
	fprintf(debug,"(%s) title\n", msg==NULL?"":msg);
d56 1
a56 1
		fprintf(debug,"%d %d edge\n", tour[i], tour[(i+1)%n]);
d58 2
a59 2
	fprintf(debug,"drawcities showpage\n");
	fflush(debug);
d65 2
a66 2
void show_tour(const char *name, const int n, int *tour );
void show_onetree(const char *name, const int n, search_node_t *bbnode,
@


1.10
log
@Version used for March 17 draft of the fictitious upper bounds paper.
@
text
@@


1.9
log
@Complete branch and bound code.  81 SPARC IPC seconds for eil51.tsp
@
text
@d27 2
d52 2
@
