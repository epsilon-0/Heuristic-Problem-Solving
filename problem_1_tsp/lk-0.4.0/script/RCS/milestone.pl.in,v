head	1.3;
access;
symbols
	zero-four-zero:1.3;
locks
	neto:1.3; strict;
comment	@# @;


1.3
date	97.11.07.22.21.01;	author neto;	state Exp;
branches;
next	1.2;

1.2
date	97.10.31.20.51.37;	author neto;	state Exp;
branches;
next	1.1;

1.1
date	97.06.19.19.38.49;	author neto;	state Exp;
branches;
next	;


desc
@Distill milestone data from LK output.
@


1.3
log
@Now we expect gzipped log files.
@
text
@#! @@PERL@@
# @@configure_input@@
# milestone.pl
# Distill milestone data from LK output.
# It doesn't handle lower bound names with embedded spaces.  Alas.
#
$number_expr = "(-?\\d+\\.?\\d*|\\.\\d+)"; # See Programming Perl
$milestone_expr = "\\s+$number_expr% above \\S+ after $number_expr";

open(IN, "zcat @@ARGV |");  # Uncompress input files.
open(MOUT ,">milestone.gpl") || die "Can't open milestone.gpl for writing";

while(<IN>) {
	if( m/^Initial milestone:$milestone_expr/o) {
		print MOUT "$2 $1\n";
	} elsif( m/^Milestone:$milestone_expr/o) {
		print MOUT "$2 $1\n";
	} elsif( m/^LK phase ended .* after $number_expr sec for LK/o) {
		$end_time = $1;
	} elsif( m/^Final milestone: $number_expr\% above/o) {
		print MOUT "$end_time $1\n";
	}
}
close(MOUT);
@


1.2
log
@Now report the final milestone, and allow negative numbers
(e.g. in case we find a tour significantly better than best known.)
@
text
@d9 2
d13 1
a13 1
while(<>) {
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
$number_expr = "(\\d+\\.?\\d*|\\.\\d+)"; # See Programming Perl
d10 1
d16 4
@
